{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\Documents\\\\MeusProjetos\\\\projetotcc\\\\idoe-marketplace\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Instalaremos esta biblioteca\n\n// 1. Cria o Contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// 2. Cria o Provedor (um componente que vai \"abraçar\" nossa aplicação)\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Guarda o token no estado. Inicializa com o token salvo no localStorage, se houver.\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [user, setUser] = useState(null);\n\n  // Este useEffect roda sempre que o 'token' muda.\n  useEffect(() => {\n    if (token) {\n      // Salva o token no localStorage para persistir o login entre sessões\n      localStorage.setItem('token', token);\n      // Decodifica o token para extrair as informações do usuário (id, name)\n      const decodedUser = jwtDecode(token);\n      setUser(decodedUser);\n    } else {\n      // Se não há token, remove do localStorage e limpa o estado do usuário\n      localStorage.removeItem('token');\n      setUser(null);\n    }\n  }, [token]);\n\n  // Função de login: atualiza o estado do token\n  const login = newToken => {\n    setToken(newToken);\n  };\n\n  // Função de logout: limpa o estado do token\n  const logout = () => {\n    setToken(null);\n  };\n\n  // O valor que será compartilhado com todos os componentes filhos\n  const value = {\n    token,\n    user,\n    isLoggedIn: !!token,\n    // Uma forma rápida de ter um booleano true/false\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n// 3. Cria um Hook customizado para facilitar o uso do contexto\n_s(AuthProvider, \"UvLavRp3/7IS3BV+qychR+/n58k=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","user","setUser","setItem","decodedUser","removeItem","login","newToken","logout","value","isLoggedIn","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/roger/Documents/MeusProjetos/projetotcc/idoe-marketplace/frontend/src/context/AuthContext.js"],"sourcesContent":["// frontend/src/context/AuthContext.js\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode'; // Instalaremos esta biblioteca\r\n\r\n// 1. Cria o Contexto\r\nconst AuthContext = createContext(null);\r\n\r\n// 2. Cria o Provedor (um componente que vai \"abraçar\" nossa aplicação)\r\nexport const AuthProvider = ({ children }) => {\r\n  // Guarda o token no estado. Inicializa com o token salvo no localStorage, se houver.\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Este useEffect roda sempre que o 'token' muda.\r\n  useEffect(() => {\r\n    if (token) {\r\n      // Salva o token no localStorage para persistir o login entre sessões\r\n      localStorage.setItem('token', token);\r\n      // Decodifica o token para extrair as informações do usuário (id, name)\r\n      const decodedUser = jwtDecode(token);\r\n      setUser(decodedUser);\r\n    } else {\r\n      // Se não há token, remove do localStorage e limpa o estado do usuário\r\n      localStorage.removeItem('token');\r\n      setUser(null);\r\n    }\r\n  }, [token]);\r\n\r\n  // Função de login: atualiza o estado do token\r\n  const login = (newToken) => {\r\n    setToken(newToken);\r\n  };\r\n\r\n  // Função de logout: limpa o estado do token\r\n  const logout = () => {\r\n    setToken(null);\r\n  };\r\n\r\n  // O valor que será compartilhado com todos os componentes filhos\r\n  const value = {\r\n    token,\r\n    user,\r\n    isLoggedIn: !!token, // Uma forma rápida de ter um booleano true/false\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// 3. Cria um Hook customizado para facilitar o uso do contexto\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;;AAEvC;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAE,SAAS,CAAC,MAAM;IACd,IAAIQ,KAAK,EAAE;MACT;MACAE,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;MACpC;MACA,MAAMO,WAAW,GAAGd,SAAS,CAACO,KAAK,CAAC;MACpCK,OAAO,CAACE,WAAW,CAAC;IACtB,CAAC,MAAM;MACL;MACAL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;MAChCH,OAAO,CAAC,IAAI,CAAC;IACf;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMS,KAAK,GAAIC,QAAQ,IAAK;IAC1BT,QAAQ,CAACS,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBV,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;;EAED;EACA,MAAMW,KAAK,GAAG;IACZZ,KAAK;IACLI,IAAI;IACJS,UAAU,EAAE,CAAC,CAACb,KAAK;IAAE;IACrBS,KAAK;IACLE;EACF,CAAC;EAED,oBAAOhB,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAd,QAAA,EAAEA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;;AAED;AAAAnB,EAAA,CA1CaF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AA2CzB,OAAO,MAAMuB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO9B,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACyB,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}